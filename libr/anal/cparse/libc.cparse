/* libc.cparse */

// include platform-specific types (arch/os)
// size_t
// off_t
/* Platform types should be parsed, inside cparse core
(calculating item size depending from the env variable in radare)


typedef enum {
    O_RDONLY = 0,
    O_WRONLY = 1,
    O_RDWR = 2,
    O_CREAT,
    O_APPEND
} open_mode;
*/

#define pid_t int

/* unistd.h */
int printf(const char *fmt, ...);
int open(const char *path, int oflag, ...);
int write(int fd, const char *buf, size_t nb);
ssize_t recv(int socket, void *buffer, size_t length, int flags);
ssize_t send(int socket, const void *buffer, size_t length, int flags);
ssize_t read(int fildes, void *buf, size_t nbyte);
int close(int fd);
int truncate(const char *path, off_t length);
int ftruncate(int fd, off_t length);

int fork();

[noreturn]
int exit();

int unlink (const char *path);
pid_t wait(int *stat_loc);
pid_t waitpid(pid_t pid, int *stat_loc, int options);

long ptrace(enum __ptrace_request request, pid_t pid,
            void *addr, void *data);
int getuid();
int geteuid();
int getgid();
int getegid();
int setuid(int uid);
int seteuid(int uid);
int setgid(int uid);
int setegid(int uid);
int execve(const char *path, char *const argv[], char *const envp[]);
int execl(const char *path, const char *arg, ...);
int execlp(const char *file, const char *arg, ...);
int execle(const char *path, const char *arg, ..., char * const envp[]);
int execv(const char *path, char *const argv[]);
int execvp(const char *file, char *const argv[]);
int execvpe(const char *file, char *const argv[], char *const envp[]);

/* string.h */
void *memchr(const void *str, int c, size_t n); 
int memcmp(const void *str1, const void *str2, size_t n); 
void *memcpy(void *str1, const void *str2, size_t n);
void *memmove(void *str1, const void *str2, size_t n);
void *memset(void *s, int c, size_t n);
char *strcat(char *dest, const char *src);
char *strncat(char *dest, const char *src, size_t n);
char *strchr(const char *str, int c); 
int strcmp(const char *str1, const char *str2);
int strncmp(const char *str1, const char *str2, size_t n);
int strcoll(const char *str1, const char *str2); 
char *strcpy(char *dest, const char *src);
char *strncpy(char *dest, const char *src, size_t n);
size_t strcspn(const char *str1, const char *str2); 
char *strerror(int errnum); 
size_t strlen(const char *str); 
char *strpbrk(const char *str1, const char *str2); 
char *strrchr(const char *str, int c); 
size_t strspn(const char *str1, const char *str2); 
char *strstr(const char *str1, const char *str2); 
char *strtok(char *str1, const char *str2); 
char *strdup(const char *s);
char *strndup(const char *s, size_t n);
char *strdupa(const char *s);
char *strndupa(const char *s, size_t n);
size_t strxfrm(char *str1, const char *str2, size_t n); 

/* stdlib.h */
double atof(const char *str); 
int atoi(const char *str); 
long int atol(const char *str); 
double strtod(const char *str, char **endptr); 
long int strtol(const char *str, char **endptr, int base); 
unsigned long int strtoul(const char *str, char **endptr, int base); 
int atexit(void (*func)(void)); 
void *malloc(size_t size);
void free(void *ptr);
void *calloc(size_t nmemb, size_t size);
void *realloc(void *ptr, size_t size);
void exit(int status); 
int system(const char *cmd);
char *getenv(const char *name);
int setenv(const char *name, const char *value, int overwrite);
int unsetenv(const char *name);
int socket(int domain, int type, int protocol);
void *bsearch(const void *key, const void *base, size_t nitems, size_t size, int (*compar)(const void *, const void *));
void qsort(void *base, size_t nitems, size_t size, int (*compar)(const void *, const void*));
int abs(int x);
div_t div(int numer, int denom);
long int labs(long int x); 
ldiv_t ldiv(long int numer, long int denom); 
int rand(void);
void srand(unsigned int seed);
int mblen(const char *str, size_t n); 
size_t mbstowcs(schar_t *pwcs, const char *str, size_t n); 
int mbtowc(whcar_t *pwc, const char *str, size_t n); 
size_t wcstombs(char *str, const wchar_t *pwcs, size_t n); 
int wctomb(char *str, wchar_t wchar); 

/* sys/mman.h */
void *mmap(void *addr, size_t len, int prot, int flags, int fildes, off_t off);

/*    
int select(int nfds, fd_set *restrict readfds,
              fd_set *restrict writefds, fd_set *restrict errorfds,
              struct timeval *restrict timeout);
*/


/* setjmp.h */
int setjmp(jmp_buf environment);
void longjmp(jmp_buf environment, int value);

/* signal.h */
void (*signal(int sig, void (*func)(int)))(int);
int raise(int sig);

/* ctype.h */
int isalnum(int ch);
int isalpha(int ch);
int iscntrl(int ch);
int isdigit(int ch);
int isgraph(int ch);
int islower(int character);
int isprint(int character);
int ispunct(int character);
int isspace(int character);
int isupper(int character);
int isxdigit(int character);
int tolower(int character);
int toupper(int character);

/* assert.h */
void assert(int expression);

/* locale.h */
char *setlocale(int category, const char *locale); 
struct lconv *localeconv(void); 

/* math.h */
double acos(double x);
double asin(double x);
double atan(double x);
double atan2(doubly y, double x);
double cos(double x);
double cosh(double x);
double sin(double x);
double sinh(double x);
double tan(double x);
double tanh(double x);
double exp(double x);
double frexp(double x, int *exponent);
double ldexp(double x, int exponent);
double log(double x);
double log10(double x);
double modf(double x, double *integer);
double pow(double x, double y);
double sqrt(double x);
double ceil(double x);
double fabs(double x);
double floor(double x);
double fmod(double x, double y);

/* stdarg.h */
void va_start(va_list ap, last_arg);
type va_arg(va_list ap, type);
void va_end(va_list ap);

/* stdio.h */
void clearerr(FILE *stream); 
int fclose(FILE *stream); 
int feof(FILE *stream); 
int ferror(FILE *stream);
int fflush(FILE *stream); 
int fgetpos(FILE *stream, fpos_t *pos);
FILE *fopen(const char *filename, const char *mode); 
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream); 
FILE *freopen(const char *filename, const char *mode, FILE *stream); 
int fseek(FILE *stream, long int offset, int whence); 
int fsetpos(FILE *stream, const fpos_t *pos); 
long int ftell(FILE *stream); 
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream); 
int remove(const char *filename); 
int rename(const char *old_filename, const char *new_filename); 
void rewind(FILE *stream); 
void setbuf(FILE *stream, char *buffer);
int setvbuf(FILE *stream, char *buffer, int mode, size_t size);
FILE *tmpfile(void);
char *tmpnam(char *str);
int fprintf(FILE *stream, const char *format, ...);
int printf(const char *format, ...);
int sprintf(char *str, const char *format, ...);
int vfprintf(FILE *stream, const char *format, va_list arg);
int vprintf(const char *format, va_list arg);
int vsprintf(char *str, const char *format, va_list arg);
int fscanf(FILE *stream, const char *format, ...);
int scanf(const char *format, ...);
int sscanf(const char *str, const char *format, ...);
int fgetc(FILE *stream); 
char *fgets(char *str, int n, FILE *stream);
int fputc(int char, FILE *stream); 
int fputs(const char *str, FILE *stream); 
int getc(FILE *stream); 
int getchar(void); 
char *gets(char *str); 
int putc(int char, FILE *stream); 
int putchar(int char); 
int puts(const char *str); 
int ungetc(int char, FILE *stream);
void perror(const char *str);

/* time.h */
char *asctime(const struct tm *timeptr); 
clock_t clock(void); 
char *ctime(const time_t *timer); 
double difftime(time_t time1, time_t time2); 
struct tm *gmtime(const time_t *timer); 
struct tm *localtime(const time_t *timer);
time_t mktime(struct tm *timeptr); 
size_t strftime(char *str, size_t maxsize, const char *format, const struct tm *timeptr);
time_t time(time_t *timer);
